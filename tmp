
      else if ((strncmp(request->http_method, "HEAD", 4) == 0)) {
        memset(buf, 0, BUF_SIZE);
        struct stat file_state;
        struct tm T;
        time_t now;
        /* Please modify the SIZE */
        char file_path[PATH_SIZE];
        char temp[BUF_SIZE];
        char file_time[PATH_SIZE];

        sprintf(file_path, "static_site%s", request->http_uri);
        get_file_type(request, file_type);
        if ((stat(file_path, file_state) < 0)) {
          /* send 404 */
          memset(buf, 0, BUF_SIZE);
          const char *reply = "HTTP/1.1 404 Not Found\r\n\r\n";
          size_t n = (sizeof(buf) > strlen(reply) + 1) ? strlen(reply) + 1
                                                       : sizeof(buf);
          strncpy(buf, reply, n);
          buf[n - 1] = '\0';
          readret = strlen(buf);
        }

        memset(buf, 0, BUF_SIZE);
        strcat(buf, "HTTP/1.1 200 OK\r\n");
        strcat(buf, "Connection: keep-alive\r\n");
        strcat(buf, "Server: liso/1.0\r\n");
        sprintf(temp, "Content-Type: %s\r\n", file_path);
        strcat(buf, temp);
        sprintf(temp, "Content-Length: %ld\r\n", file_state.st_size);
        strcat(buf, temp);
        now = time(NULL);
        strftime(file_time, sizeof(filetime), "%a, %d %b %Y %H:%M:%S %Z",
                 gmtime(&now));
        sprintf(temp, "Date: %s\r\n", file_time);
        strcat(buf, temp);
        strftime(filetime, sizeof(filetime), "%a, %d %b %Y %H:%M:%S %Z",
                 gmtime(&sbuf.st_mtim.tv_sec));
        sprintf(temp, "Last-Modified: %s\r\n", file_time);
        strcat(buf, temp);
        strcat(buf, "\r\n");
        readret = strlen(buf);
      }
